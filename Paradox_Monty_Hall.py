import tkinter as tk
from tkinter import messagebox
import random
import sqlite3
import pandas as pd
import matplotlib.pyplot as plt


class MontyHall:
    def __init__(self):
        self.game = [1, 1, 2]  # 1 - –∫–æ–∑–∞; 2 - –∞–≤—Ç–æ–º–æ–±–∏–ª—å
        self.player_choice = None
        self.goat_door = None
        self.options = []
        self.switched = False  # –§–ª–∞–≥ —Å–º–µ–Ω—ã –¥–≤–µ—Ä–∏
        self.conn = sqlite3.connect('monty_hall.db')  # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        self.create_table()

    def create_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
                CREATE TABLE IF NOT EXISTS results (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    result TEXT,
                    switched INTEGER
                )
        ''')
        self.conn.commit()

    def save_result(self, result, switched):
        cursor = self.conn.cursor()
        cursor.execute('INSERT INTO results (result, switched) VALUES (?, ?)', (result, switched))
        self.conn.commit()

    def init_game(self):
        random.shuffle(self.game)
        self.player_choice = None
        self.goat_door = None
        self.options = []
        self.switched = False

    def choose_door(self, door):
        self.player_choice = door
        self._reveal_goat()

    def _reveal_goat(self):
        self.options = [i for i in range(3) if i != self.player_choice and self.game[i] != 2]
        self.goat_door = random.choice(self.options)
        self.options = [i for i in range(3) if i != self.player_choice and i != self.goat_door]

    def switch_choice(self):
        if self.options:
            self.player_choice = self.options[0]
            self.switched = True

    def get_result(self):
        if self.game[self.player_choice] == 2:
            result = "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å üöó"
        else:
            result = "–ù–µ—É–¥–∞—á–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑... üêê"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        self.save_result(result, int(self.switched))
        return result

    def show_statistics(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        df = pd.read_sql_query('SELECT * FROM results', self.conn)

        if len(df) >= 10:
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
            wins = df[df['result'].str.contains("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º")]
            losses = df[df['result'].str.contains("–ù–µ—É–¥–∞—á–∞")]

            # –î–æ–ª–∏ –≤—ã–∏–≥—Ä—ã—à–µ–π
            switched_wins = wins[wins['switched'] == 1].shape[0]
            not_switched_wins = wins[wins['switched'] == 0].shape[0]

            # –î–æ–ª–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π
            switched_losses = losses[losses['switched'] == 1].shape[0]
            not_switched_losses = losses[losses['switched'] == 0].shape[0]

            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
            labels = [
                '–í—ã–∏–≥—Ä—ã—à–∏ —Å–æ —Å–º–µ–Ω–æ–π –¥–≤–µ—Ä–∏',
                '–í—ã–∏–≥—Ä—ã—à–∏ –±–µ–∑ —Å–º–µ–Ω—ã –¥–≤–µ—Ä–∏',
                '–ü—Ä–æ–∏–≥—Ä—ã—à–∏ —Å–æ —Å–º–µ–Ω–æ–π –¥–≤–µ—Ä–∏',
                '–ü—Ä–æ–∏–≥—Ä—ã—à–∏ –±–µ–∑ —Å–º–µ–Ω—ã –¥–≤–µ—Ä–∏'
            ]
            sizes = [switched_wins, not_switched_wins, switched_losses, not_switched_losses]
            colors = ['limegreen', 'lightgreen', 'lightcoral', 'red']
            explode = (0.1, 0, 0.1, 0)  # –∫—É—Å–∫–∏

            # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫—Ä—É–≥–∞
            plt.figure(figsize=(8, 8))
            plt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True,
                    startangle=140)
            plt.title('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä')
            plt.show()
        else:
            messagebox.showinfo("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–°—ã–≥—Ä–∞–π—Ç–µ –µ—â—ë –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


class MontyHallApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–ü–∞—Ä–∞–¥–æ–∫—Å –ú–æ–Ω—Ç–∏ –•–æ–ª–ª–∞")
        self.root.geometry("500x500")
        self.game = MontyHall()
        self.game.init_game()
        self.create_widgets()

    def create_widgets(self):
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–≤–µ—Ä–∏
        self.door_buttons = []
        for i in range(3):
            button = tk.Button(self.root, text=f"–î–≤–µ—Ä—å {i + 1}", font=("Arial", 14),
                               command=lambda i=i: self.choose_door(i))
            button.pack(pady=5)
            self.door_buttons.append(button)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞
        self.switch_button = tk.Button(self.root, text="–ü–æ–º–µ–Ω—è—Ç—å –¥–≤–µ—Ä—å", font=("Arial", 14), command=self.switch_choice,
                                       state=tk.DISABLED)
        self.switch_button.pack(pady=10)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self.result_button = tk.Button(self.root, text="–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", font=("Arial", 14),
                                       command=self.show_result, state=tk.DISABLED)
        self.result_button.pack(pady=10)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stats_button = tk.Button(self.root, text="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", font=("Arial", 14),
                                      command=self.show_statistics)
        self.stats_button.pack(pady=10)

        # –ö–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
        self.new_game_button = tk.Button(self.root, text="–ù–æ–≤–∞—è –∏–≥—Ä–∞", font=("Arial", 14),
                                         command=self.new_game)
        self.new_game_button.pack(pady=10)

    def choose_door(self, door):
        self.game.choose_door(door)
        for button in self.door_buttons:
            button.config(state=tk.DISABLED)
        self.switch_button.config(state=tk.NORMAL)
        self.result_button.config(state=tk.NORMAL)

    def switch_choice(self):
        self.game.switch_choice()
        self.switch_button.config(state=tk.DISABLED)

    def show_result(self):
        result = self.game.get_result()
        messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç", result)
        self.result_button.config(state=tk.DISABLED)

    def show_statistics(self):
        self.game.show_statistics()

    def new_game(self):
        self.game.init_game()
        for button in self.door_buttons:
            button.config(state=tk.NORMAL)
        self.switch_button.config(state=tk.DISABLED)
        self.result_button.config(state=tk.DISABLED)


if __name__ == "__main__":
    root = tk.Tk()
    app = MontyHallApp(root)
    root.mainloop()
